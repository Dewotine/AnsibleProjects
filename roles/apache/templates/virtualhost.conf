{{ ansible_managed | comment }}
<VirtualHost {{ virtualhost.ip | default("127.0.0.1") }}:{{ virtualhost.port | default("8080") }}>
	ServerAdmin {{ virtualhost.server_admin if 'server_admin' in virtualhost else apache_server_admin }}
	ServerName {{ virtualhost.server_name | default(virtualhost.name) }}
{% if virtualhost.server_aliases is defined %}
{% for alias in virtualhost.server_aliases %}
	ServerAlias {{ alias }}
{% endfor %}
{% endif %}
	DocumentRoot {% if virtualhost.document_root is defined %}{{ virtualhost.document_root }}
{% else %}/var/www/{{ virtualhost.name }}
{% endif %}

	ErrorLog "{{ virtualhost.log_path | default(apache_log_path) }}/{{ virtualhost.name }}_error.log"
	CustomLog "{{ virtualhost.log_path | default(apache_log_path) }}/{{ virtualhost.name }}_access.log" "{{ virtualhost.custom_log_format | default(apache_log_formats_default) }}"
{% if virtualhost.ssl | default(False) %}
	SSLEngine on
	SSLCertificateFile "/etc/ssl/certs/{{ virtualhost.ssl_certificate }}"
	SSLCertificateKeyFile "/etc/ssl/private/{{ virtualhost.ssl_key }}"
{% if virtualhost.ssl_certificate_chain is defined %}
	SSLCertificateChainFile "/etc/ssl/certs/{{ virtualhost.ssl_certificate_chain }}"
{% endif %}
	SSLProtocol {{ virtualhost.ssl_protocols | default(apache_ssl_protocols) }}
{% endif %}
{% if virtualhost.aliases is defined %}
{% for alias in virtualhost.aliases %}
    Alias {{ alias.src }} {{ alias.dest }}
{% endfor %}
{% endif %}
{% if virtualhost.timeout is defined %}
	Timeout {{ virtualhost.timeout }}
{% endif %}
{% if virtualhost.proxy_timeout is defined %}
	ProxyTimeout {{ virtualhost.proxy_timeout }}
{% endif %}
{% if virtualhost.keepalive is defined %}
	KeepAlive {% if virtualhost.keepalive %}On
{% else %}Off
{% endif %}
{% if virtualhost.keepalive_timeout is defined %}
	KeepAliveTimeout {{ virtualhost.keepalive_timeout }}
{% endif %}
{% endif %}
{% if virtualhost.limitxmlrequestbody is defined %}
	LimitXMLRequestBody {{ virtualhost.limitxmlrequestbody }}
{% endif %}
{% if virtualhost.limitrequestbody is defined %}
	LimitRequestBody {{ virtualhost.limitrequestbody }}
{% endif %}
{% if virtualhost.allowed_directories is defined %}
{% for directory in virtualhost.allowed_directories %}
    <Directory {{ directory }}>
        Require all granted
    </Directory>
{% endfor %}
{% endif %}
{% if (virtualhost.rewrite_rules is defined or virtualhost.disallowed_paths_regex is defined or virtualhost.document_root_rewrite_rules is defined) and 'rewrite' in (apache_modules | map(attribute='name')) %}

	RewriteEngine on
{% endif %}

	<Directory {% if virtualhost.document_root is defined %}{{ virtualhost.document_root }}{% else %}/var/www/{{ virtualhost.name }}{% endif %}>
		Options {{ '+' if 'indexes' in virtualhost else '-' }}Indexes +FollowSymLinks
{% if virtualhost.allowed_hosts is defined %}
{% for host in virtualhost.allowed_hosts %}
		Require ip {{ host }}
{% endfor %}
{% else %}
		Require all granted
{% endif %}
		AllowOverride {{ virtualhost.allow_override | default('None') }}

{# Document root rewrite rules #}
{% if virtualhost.document_root_rewrite_rules is defined %}
{% for rule in virtualhost.document_root_rewrite_rules %}
{% if rule.base is defined %}
		RewriteBase {{ rule.base }}
{% endif %}
{% if rule.conditions is defined %}
{% for cond in rule.conditions %}
		RewriteCond {{ cond }}
{% endfor %}
{% endif %}
		RewriteRule {{ rule.pattern }} {{ rule.dest }}
{% endfor %}
{% endif %}
		# Custom fragment start
		{{ virtualhost.document_root_fragment | default('') }}
		# Custom fragment end
	</Directory>
{% if virtualhost.rewrite_rules is defined and 'rewrite' in (apache_modules | map(attribute='name')) %}

{# Rewrite rules #}
{% for rule in virtualhost.rewrite_rules %}
{% if rule.base is defined %}
	RewriteBase {{ rule.base }}
{% endif %}
{% if rule.conditions is defined %}
{% for cond in rule.conditions %}
	RewriteCond {{ cond }}
{% endfor %}
{% endif %}
	RewriteRule {{ rule.pattern }} {{ rule.dest }}
{% endfor %}
{% endif %}
{% for rdr in virtualhost.redirects | default([]) %}
	Redirect {{ rdr.src }} {{ rdr.dest }}
{% endfor %}
{% for rm in virtualhost.redirect_match | default([]) %}
	RedirectMatch {{ rm.status | default('302') }} {{ rm.regexp }} {{ rm.dest }}
{% endfor %}
{% if virtualhost.disallowed_paths_regex is defined %}
{% for path in virtualhost.disallowed_paths_regex %}
	RewriteRule {{ path }} - [F,L]
{% endfor %}
{% endif %}
{% if virtualhost.disallowed_files is defined %}
{% for file in virtualhost.disallowed_files %}
	<Files "{{ file }}">
		Require all denied
	</Files>
{% endfor %}
{% endif %}
{% if virtualhost.expire_by_type is defined and 'expires' in (apache_modules | map(attribute='name')) %}
	ExpiresActive On
{% for (filetype, rule) in virtualhost.expire_by_type.itervirtualhosts() %}	ExpiresByType {{ filetype }} "{{ rule.rule }}"
{% endfor %}
{% endif %}

{% if virtualhost.deflate_by_type is defined and 'deflate' in (apache_modules | map(attribute='name')) %}
	DeflateCompressionLevel {{ virtualhost.deflate_compression_level | default(9) }}
{% for dbt in virtualhost.deflate_by_type %}
	AddOutputFilterByType DEFLATE {{ dbt }}
{% endfor %}

{% endif %}
{% if virtualhost.proxy_pass is defined and 'proxy' in (apache_modules | map(attribute='name')) %}
	ProxyPreserveHost {{ 'On' if (virtualhost.proxy_preserve_host | default(false)) else 'Off' }}
{% for pp in virtualhost.proxy_pass %}
	ProxyPass {{ pp.path }} {{ pp.url }}
	<Location {{ pp.path }}>
		ProxyPassReverse {{ pp.url }}
	</Location>
{% endfor %}

{% endif %}
{% if virtualhost.cors_allowed_regex is defined and virtualhost.cors_allowed_paths is defined %}
{% for path in virtualhost.cors_allowed_paths %}
    <Location {{ path }}>
        SetEnvIfNoCase Origin "{{ virtualhost.cors_allowed_regex }}" ACAO=$0
        Header set Access-Control-Allow-Origin %{ACAO}e env=ACAO
    </Location>
{% endfor %}
{% endif %}
{% if virtualhost.setenvif is defined %}
{% for seif in virtualhost.setenvif %}
    SetEnvIf {{ seif.attribute }} {{ seif.regex }} {{ seif.envvars | join(' ') }}
{% endfor %}
{% endif %}
{% if virtualhost.headers is defined %}
{% for header in virtualhost.headers %}
    Header {{ header.action | default('set') }} {{ header.name }} {{ header.value }} {{ header.env | default('') }}
{% endfor %}
{% endif %}
{% if virtualhost.request_headers is defined %}
{% for header in virtualhost.request_headers %}
    RequestHeader {{ header.action | default('set') }} {{ header.name }} {{ header.value }} {{ header.env | default('') }}
{% endfor %}
{% endif %}
{% if virtualhost.jk_mounts is defined %}
{% for mount in virtualhost.jk_mounts %}
	{% if mount.mount is defined and not mount.mount %}JkUnMount{% else %}JkMount{% endif %} {{ mount.path }} {{ mount.worker }}
{% endfor %}

{% endif %}
{% if virtualhost.svn_enable | default(false) %}
	<Location />
		DAV svn
		SVNParentPath       {{ virtualhost.svn_data_dir }}
		SVNListParentPath   On
		AuthzSVNAccessFile  '{{ virtualhost.svn_auth_access_file }}'
		Require valid-user
		AuthType basic
		AuthName "SVN {{ virtualhost.server_name }}"
		AuthUserFile {{ virtualhost.svn_auth_user_file }}
	</Location>
{% endif %}
{% if virtualhost.wsgi_enable | default(false) %}
    WSGIPassAuthorization {{ 'On' if (virtualhost.wsgi_passauthorization | default(False)) else 'Off' }}
	WSGIDaemonProcess {{ virtualhost.wsgi_appname }} user=www-data group=www-data threads={{ virtualhost.wsgi_threads | default(5) }} processes={{ virtualhost.wsgi_processes | default(1) }} home={{ virtualhost.wsgi_home }} display-name={{ virtualhost.wsgi_appname }} request-timeout={{ virtualhost.wsgi_request_timeout | default(60) }}
	WSGIScriptAlias {{ virtualhost.wsgi_scriptalias_source | default('/') }} {{ virtualhost.wsgi_home }}/application.wsgi{{ virtualhost.wsgi_scriptalias_dest | default('') }}
	<Directory {{ virtualhost.wsgi_home }}>
	  WSGIProcessGroup {{ virtualhost.wsgi_appname }}
	  WSGIApplicationGroup %{GLOBAL}
	  WSGIScriptReloading On
	</Directory>
{% endif %}
</VirtualHost>
